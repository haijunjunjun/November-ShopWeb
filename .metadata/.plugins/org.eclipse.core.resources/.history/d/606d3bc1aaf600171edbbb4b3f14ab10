package com.november.system.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authc.Account;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.november.common.utils.domain.Response;
import com.november.system.domain.User;
import com.november.system.service.UserService;

import io.swagger.annotations.Api;

@Api(tags = "AuthApi", description = "认证授权接口")
@Controller
public class AuthController {
	
	private Logger logger = LoggerFactory.getLogger(AuthController.class);

	@Autowired
	private UserService userService;
	
	
	@RequestMapping(value = "/login")
	public String login() {
		return "/login";
	}
	
//	@ApiOperation(value = "用户登录", notes = "用户登录", response = Response.class)
	@ResponseBody
	@PostMapping(value = "/loginUser",produces = { "application/json;charset=utf-8" })
	public Response<String> loginUser(HttpServletRequest request,User u){
		try {
			if (u == null || StringUtils.isEmpty(u.getLoginName()) || StringUtils.isEmpty(u.getPassword()))
				return new Response<String>(Response.ERROR, "账号信息不完整");
			User user = userService.findUserByName(u.getLoginName());
			Account user = accountService.findByNameAndCompanyId(account.getAccountName(), account.getCompanyId());
			if (user == null) {
				return new Response<String>(Response.ERROR, "用户不存在");
			}

			if (!StringUtils.equals(u.getPassword(), user.getPassword())) {
				return new Response<String>(Response.ERROR, "账号或密码不正确");
			}

			Map<String, Object> info = new HashMap<String, Object>();
			info.put(GlobalConstant.TENANT_ID, "yizhi");
			info.put(GlobalConstant.USER_ID, "0");
			info.put(GlobalConstant.USER_ACCOUNT, "manager");
			String token = tokenHelper.createToken("123", info);
			Response<String> resp = new Response<String>(Response.SUCCESS, "用户验证成功");
			resp.setData(token);
			return resp;

		} catch (Exception e) {
			logger.error("", e);
			return new Response<String>(Response.ERROR, e.getLocalizedMessage());
		}
		return resp;
	}
}
